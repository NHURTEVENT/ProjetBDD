--création de la bdd


DROP DATABASE IF EXISTS `Nouvelle BDD`;
CREATE DATABASE IF NOT EXISTS `Nouvelle BDD`;


DROP TABLE IF EXISTS `Nouvelle BDD`.Client;
DROP TABLE IF EXISTS `Nouvelle BDD`.Commande;
DROP TABLE IF EXISTS `Nouvelle BDD`.PréparationPotion;
DROP TABLE IF EXISTS `Nouvelle BDD`.Potion;
DROP TABLE IF EXISTS `Nouvelle BDD`.PréparationOnguent;
DROP TABLE IF EXISTS `Nouvelle BDD`.Ingrédient;
DROP TABLE IF EXISTS `Nouvelle BDD`.Onguent;
DROP TABLE IF EXISTS `Nouvelle BDD`.StockIngrédient;
DROP TABLE IF EXISTS `Nouvelle BDD`.Diluant;
DROP TABLE IF EXISTS `Nouvelle BDD`.StockDiluant;
DROP TABLE IF EXISTS `Nouvelle BDD`.Récipient;
DROP TABLE IF EXISTS `Nouvelle BDD`.StockRécipient;
DROP TABLE IF EXISTS `Nouvelle BDD`.Inventeur;
DROP TABLE IF EXISTS `Nouvelle BDD`.InventionPotion;
DROP TABLE IF EXISTS `Nouvelle BDD`.Fournisseur;
DROP TABLE IF EXISTS `Nouvelle BDD`.FournitureIngrédient;
DROP TABLE IF EXISTS `Nouvelle BDD`.PropositionRecette;

CREATE TABLE IF NOT EXISTS `Nouvelle BDD`.Client (
	IDClient INT(4) NOT NULL AUTO_INCREMENT,
	NomClient VARCHAR(30),
	PrenomClient VARCHAR (30),

	CONSTRAINT pk_NumPermis PRIMARY KEY(IDClient)    
);


CREATE TABLE IF NOT EXISTS `Nouvelle BDD`.Commande (
	IDCommande INT(4) NOT NULL AUTO_INCREMENT,
	IDClient INT(4),
	Potion VARCHAR(30),
	Onguent VARCHAR(30),
	Quantité INT(3),
	Récipient VARCHAR (30),
	Ingrédient VARCHAR (30),
	Fraîcheur INT(3) DEFAULT NULL,
	Prix INT(3),

	CONSTRAINT Fk_Ingrédient FOREIGN KEY (Ingrédient) 
	REFERENCES Ingrédient(Ingrédient),
	CONSTRAINT fk_Potion FOREIGN KEY (Potion) 
	REFERENCES potion(Potion),
	CONSTRAINT fk_Onguent FOREIGN KEY (Onguent)
	REFERENCES Onguent(Onguent),
	CONSTRAINT fk_Récipient FOREIGN KEY (Récipient)
	REFERENCES Récipient(Récipient),
	CONSTRAINT fk_Client FOREIGN KEY (IDClient) REFERENCES Client(IDClient),
	CONSTRAINT pk_Commande PRIMARY KEY(IDCommande)
);


CREATE TABLE IF NOT EXISTS `Nouvelle BDD`.PréparationPotion (
	Potion VARCHAR(50),
	Ingrédient VARCHAR(30),
	Diluant VARCHAR(30),
	OrdreIngrédient INT(2),
	FraicheurMinIngrédient INT(3),
	FraicheurMaxIngrédient INT(3),
	QuantitéIngrédient INT(20),
	Température INT(3),

	CONSTRAINT fk_NomPotion FOREIGN KEY (Potion) 
	REFERENCES Potion(Potion) ,

	CONSTRAINT fk_NomIngrédient FOREIGN KEY (Ingrédient) 
	REFERENCES Ingrédient(Ingrédient),

	CONSTRAINT pk_PréparationPotion PRIMARY KEY (Potion, Ingrédient) 
);


CREATE TABLE IF NOT EXISTS `Nouvelle BDD`.Potion (
    Potion VARCHAR(50),
    PrixPotion INT(3),
    CONSTRAINT Pk_Potion PRIMARY KEY (Potion) 
);


CREATE TABLE IF NOT EXISTS `Nouvelle BDD`.PréparationOnguent (
	Onguent VARCHAR(50),
	Ingrédient VARCHAR(30),
	OrdreIngrédient INT(2),
	FraicheurMinIngrédient INT(3),
	FraicheurMaxIngrédient INT(3),
	QuantitéIngrédient INT(20),

	CONSTRAINT fk_Onguent FOREIGN KEY (Onguent) 
	REFERENCES onguent(Onguent),

	CONSTRAINT fk_Ingrédient FOREIGN KEY (Ingrédient) 
	REFERENCES Ingrédient(Ingrédient),

	CONSTRAINT pk_PréparationOnguent PRIMARY KEY (Onguent, Ingrédient) 
);


CREATE TABLE IF NOT EXISTS `Nouvelle BDD`.Ingrédient (
	Ingrédient VARCHAR(30),
	PrixIngrédient INT(3),

	CONSTRAINT Pk_ingrédient PRIMARY KEY(Ingrédient)
);


CREATE TABLE IF NOT EXISTS `Nouvelle BDD`.Onguent (
    Onguent VARCHAR(50),
    PrixOnguent INT(3),
    CONSTRAINT Pk_Potion PRIMARY KEY (Onguent) 
);


CREATE TABLE IF NOT EXISTS `Nouvelle BDD`.StockIngrédient (
	Ingrédient VARCHAR(30),
	QuantitéEnStock INT(3),
	FraîcheurMax INT(3),
	DateArrivée Date,

	CONSTRAINT Fk_Ingrédient FOREIGN KEY (Ingrédient) REFERENCES Ingrédient(Ingrédient),
	CONSTRAINT Pk_stock PRIMARY KEY(Ingrédient)
);


CREATE TABLE IF NOT EXISTS `Nouvelle BDD`.Diluant(
	Diluant VARCHAR(30),
	PrixDiluant INT(3) ,

	CONSTRAINT Pk_Diluant PRIMARY KEY (Diluant)
);


CREATE TABLE IF NOT EXISTS `Nouvelle BDD`.StockDiluant (
	Diluant VARCHAR(30),
	Stock INT(3),

	CONSTRAINT Pk_StockDiluant PRIMARY KEY (Diluant)
);


CREATE TABLE IF NOT EXISTS `Nouvelle BDD`.Récipient (
	Récipient VARCHAR (20),
	Prix INT(3),
	CoefRécipient INT(3),

	CONSTRAINT Pk_Récipient PRIMARY KEY (Récipient)
);


CREATE TABLE IF NOT EXISTS `Nouvelle BDD`.StockRécipient(
	Récipient VARCHAR(30),
	Stock INT(3),

	CONSTRAINT Pk_StockRécipient PRIMARY KEY (Récipient)
);


CREATE TABLE IF NOT EXISTS `Nouvelle BDD`.Inventeur(
	NumPermis INT(4) NOT NULL AUTO_INCREMENT ,
	NomInventeur VARCHAR(30),
	PrenomInventeur VARCHAR (30),

	CONSTRAINT pk_NumPermis PRIMARY KEY(NumPermis)    
);


CREATE TABLE IF NOT EXISTS `Nouvelle BDD`.InventionPotion (
	NumPermis INT(4),
	Potion VARCHAR (50),

	CONSTRAINT fk_Inventeur FOREIGN KEY (NumPermis) REFERENCES inventeur(NumPermis),
	CONSTRAINT fk_Potion FOREIGN KEY (Potion) REFERENCES potion(Potion),
	CONSTRAINT pk_InventionPotion PRIMARY KEY (NumPermis,Potion)
);



CREATE TABLE IF NOT EXISTS `Nouvelle BDD`.Fournisseur(
IDFournisseur INT(4),
NomFournisseur VARCHAR(30), 
PrenomFournisseur VARCHAR(30), 
CONSTRAINT Pk_Fournisseur PRIMARY KEY (IDFournisseur) 
);


CREATE TABLE IF NOT EXISTS `Nouvelle BDD`.FournitureIngrédient(
IDFournisseur INT(4),
Ingrédient VARCHAR(30),
CONSTRAINT Fk_Fournisseur FOREIGN KEY (IDFournisseur) REFERENCES fournisseur(IDFournisseur),
CONSTRAINT Fk_Ingrédiet FOREIGN KEY (Ingrédient) REFERENCES ingrédient(ingrédient), 
CONSTRAINT Pk_FournitureIngrédient PRIMARY KEY (IDFournisseur,Ingrédient) );


CREATE TABLE IF NOT EXISTS `Nouvelle BDD`.PropositionRecette
SELECT *
FROM `Nouvelle BDD`.PréparationPotion;

END |




















-- procédures
























-- recette à 5 ingrédients

    DELIMITER |
    CREATE PROCEDURE AjoutRecette5(
        IN `Nom potion` VARCHAR(30), 

        IN `Premier ingrédient` VARCHAR(30),
        IN `Quantité 1er ingrédient`INT(2),
        IN `Fraicheur minimum 1er ingrédient`INT(3),
        IN `Fraicheur maximum 1er ingrédient`INT(3) , 

        IN `Deuxième ingrédient` VARCHAR(30) ,
        IN `Quantité 2eme ingrédient`INT(2),
        IN `Fraicheur minimum 2eme ingrédient`INT(3) ,
        IN `Fraicheur maximum 2eme ingrédient`INT(3) , 

        IN `Troisième ingrédient` VARCHAR(30),
        IN `Quantité 3eme ingrédient`INT(2),
        IN `Fraicheur minimum 3eme ingrédient`INT(3) , 
        IN `Fraicheur maximum 3eme ingrédient`INT(3) , 

        IN `Quatrième ingrédient` VARCHAR(30) , 
        IN `Quantité 4eme ingrédient`INT(2),
        IN `Fraicheur minimum 4eme ingrédient`INT(3) , 
        IN `Fraicheur maximum 4eme ingrédient`INT(3) , 

        IN `Cinquième ingrédient` VARCHAR(30),
        IN `Quantité 5eme ingrédient`INT(2),
        IN `Fraicheur minimum 5eme ingrédient`INT(3) ,
        IN `Fraicheur maximum 5eme ingrédient`INT(3) , 

        IN Diluant VARCHAR(30) ,
        IN Température INT(3) )
        #IN `Nom Inventeur` VARCHAR(30),
        #IN `Prénom Inventeur` VARCHAR(30),
        #IN `Numéro de permis`INT(4) )


    BEGIN

    INSERT INTO propositionrecette VALUES 
    (`Nom potion`, `Premier ingrédient`, Diluant, 1, `Fraicheur minimum 1er ingrédient`, `Fraicheur maximum 1er ingrédient`, `Quantité 1er ingrédient`, Température),
    (`Nom potion`, `Deuxième ingrédient`, Diluant, 2, `Fraicheur minimum 2eme ingrédient`, `Fraicheur maximum 2eme ingrédient`, `Quantité 2eme ingrédient`, Température),
    (`Nom potion`, `Troisième ingrédient`, Diluant, 3, `Fraicheur minimum 3eme ingrédient`, `Fraicheur maximum 3eme ingrédient`, `Quantité 3eme ingrédient`, Température),
    (`Nom potion`, `Quatrième ingrédient`, Diluant, 4, `Fraicheur minimum 4eme ingrédient`, `Fraicheur maximum 4eme ingrédient`, `Quantité 4eme ingrédient`, Température),
    (`Nom potion`, `Cinquième ingrédient`, Diluant, 5, `Fraicheur minimum 5eme ingrédient`, `Fraicheur maximum 5eme ingrédient`, `Quantité 5eme ingrédient`, Température);


    END; |

    -- recette à 4 ingrédients

  #  DELIMITER |
    CREATE PROCEDURE AjoutRecette4(
        IN `Nom potion` VARCHAR(30), 

        IN `Premier ingrédient` VARCHAR(30),
        IN `Quantité 1er ingrédient`INT(2),
        IN `Fraicheur minimum 1er ingrédient`INT(3),
        IN `Fraicheur maximum 1er ingrédient`INT(3) , 

        IN `Deuxième ingrédient` VARCHAR(30) ,
        IN `Quantité 2eme ingrédient`INT(2),
        IN `Fraicheur minimum 2eme ingrédient`INT(3) ,
        IN `Fraicheur maximum 2eme ingrédient`INT(3) , 

        IN `Troisième ingrédient` VARCHAR(30),
        IN `Quantité 3eme ingrédient`INT(2),
        IN `Fraicheur minimum 3eme ingrédient`INT(3) , 
        IN `Fraicheur maximum 3eme ingrédient`INT(3) , 

        IN `Quatrième ingrédient` VARCHAR(30) , 
        IN `Quantité 4eme ingrédient`INT(2),
        IN `Fraicheur minimum 4eme ingrédient`INT(3) , 
        IN `Fraicheur maximum 4eme ingrédient`INT(3) , 


        IN Diluant VARCHAR(30) ,
        IN Température INT(3) )
        #IN `Nom Inventeur` VARCHAR(30),
        #IN `Prénom Inventeur` VARCHAR(30),
        #IN `Numéro de permis`INT(4) )


    BEGIN

    INSERT INTO propositionrecette VALUES 
    (`Nom potion`, `Premier ingrédient`, Diluant, 1, `Fraicheur minimum 1er ingrédient`, `Fraicheur maximum 1er ingrédient`, `Quantité 1er ingrédient`, Température),
    (`Nom potion`, `Deuxième ingrédient`, Diluant, 2, `Fraicheur minimum 2eme ingrédient`, `Fraicheur maximum 2eme ingrédient`, `Quantité 2eme ingrédient`, Température),
    (`Nom potion`, `Troisième ingrédient`, Diluant, 3, `Fraicheur minimum 3eme ingrédient`, `Fraicheur maximum 3eme ingrédient`, `Quantité 3eme ingrédient`, Température),
    (`Nom potion`, `Quatrième ingrédient`, Diluant, 4, `Fraicheur minimum 4eme ingrédient`, `Fraicheur maximum 4eme ingrédient`, `Quantité 4eme ingrédient`, Température);


    END; |

    -- Recette 3 ingrédients

   # DELIMITER |
    CREATE PROCEDURE AjoutRecette3(
        IN `Nom potion` VARCHAR(30), 

        IN `Premier ingrédient` VARCHAR(30),
        IN `Quantité 1er ingrédient`INT(2),
        IN `Fraicheur minimum 1er ingrédient`INT(3),
        IN `Fraicheur maximum 1er ingrédient`INT(3) , 

        IN `Deuxième ingrédient` VARCHAR(30) ,
        IN `Quantité 2eme ingrédient`INT(2),
        IN `Fraicheur minimum 2eme ingrédient`INT(3) ,
        IN `Fraicheur maximum 2eme ingrédient`INT(3) , 

        IN `Troisième ingrédient` VARCHAR(30),
        IN `Quantité 3eme ingrédient`INT(2),
        IN `Fraicheur minimum 3eme ingrédient`INT(3) , 
        IN `Fraicheur maximum 3eme ingrédient`INT(3) , 


        IN Diluant VARCHAR(30) ,
        IN Température INT(3) )
        #IN `Nom Inventeur` VARCHAR(30),
        #IN `Prénom Inventeur` VARCHAR(30),
        #IN `Numéro de permis`INT(4) )


    BEGIN

    INSERT INTO propositionrecette VALUES 
    (`Nom potion`, `Premier ingrédient`, Diluant, 1, `Fraicheur minimum 1er ingrédient`, `Fraicheur maximum 1er ingrédient`, `Quantité 1er ingrédient`, Température),
    (`Nom potion`, `Deuxième ingrédient`, Diluant, 2, `Fraicheur minimum 2eme ingrédient`, `Fraicheur maximum 2eme ingrédient`, `Quantité 2eme ingrédient`, Température),
    (`Nom potion`, `Troisième ingrédient`, Diluant, 3, `Fraicheur minimum 3eme ingrédient`, `Fraicheur maximum 3eme ingrédient`, `Quantité 3eme ingrédient`, Température);

    END; |

    -- recette 2 ingrédients

   # DELIMITER |
    CREATE PROCEDURE AjoutRecette2(
        IN `Nom potion` VARCHAR(30), 

        IN `Premier ingrédient` VARCHAR(30),
        IN `Quantité 1er ingrédient`INT(2),
        IN `Fraicheur minimum 1er ingrédient`INT(3),
        IN `Fraicheur maximum 1er ingrédient`INT(3) , 

        IN `Deuxième ingrédient` VARCHAR(30) ,
        IN `Quantité 2eme ingrédient`INT(2),
        IN `Fraicheur minimum 2eme ingrédient`INT(3) ,
        IN `Fraicheur maximum 2eme ingrédient`INT(3) , 


        IN Diluant VARCHAR(30) ,
        IN Température INT(3) )
        #IN `Nom Inventeur` VARCHAR(30),
        #IN `Prénom Inventeur` VARCHAR(30),
        #IN `Numéro de permis`INT(4) )


    BEGIN

    INSERT INTO propositionrecette VALUES 
    (`Nom potion`, `Premier ingrédient`, Diluant, 1, `Fraicheur minimum 1er ingrédient`, `Fraicheur maximum 1er ingrédient`, `Quantité 1er ingrédient`, Température),
    (`Nom potion`, `Deuxième ingrédient`, Diluant, 2, `Fraicheur minimum 2eme ingrédient`, `Fraicheur maximum 2eme ingrédient`, `Quantité 2eme ingrédient`, Température);
    END; |

    -- recette 1 ingrédient

   # DELIMITER |
    CREATE PROCEDURE AjoutRecette1(
        IN `Nom potion` VARCHAR(30), 

        IN `Premier ingrédient` VARCHAR(30),
        IN `Quantité 1er ingrédient`INT(2),
        IN `Fraicheur minimum 1er ingrédient`INT(3),
        IN `Fraicheur maximum 1er ingrédient`INT(3) , 



        IN Diluant VARCHAR(30) ,
        IN Température INT(3) )
        #IN `Nom Inventeur` VARCHAR(30),
        #IN `Prénom Inventeur` VARCHAR(30),
        #IN `Numéro de permis`INT(4) )


    BEGIN

    INSERT INTO propositionrecette VALUES 
    (`Nom potion`, `Premier ingrédient`, Diluant, 1, `Fraicheur minimum 1er ingrédient`, `Fraicheur maximum 1er ingrédient`, `Quantité 1er ingrédient`, Température);

    END; |

    -- pourtester



    # CALL AjoutRecette('potion de test',3,'ender eye',1,NULL,50,'Blaze powder',3,NULL,NULL, 'Slimeball',2,12,40,'',NULL,NULL,NULL,'',NULL,NULL,NULL,'Water',50);


    -- valider


 #   DELIMITER |
    CREATE PROCEDURE ValiderRecette( Recette VARCHAR(30))

    BEGIN

    INSERT INTO préparationpotion
    SELECT *
    FROM propositionrecette 
    WHERE propositionrecette.Potion LIKE Recette;


    DELETE FROM propositionrecette
    WHERE propositionrecette.Potion LIKE Recette;
    END;|

    -- supprimer


 #   DELIMITER |
    CREATE PROCEDURE SupprimerRecette( Recette VARCHAR(30))

    BEGIN


    DELETE FROM propositionrecette
    WHERE propositionrecette.Potion LIKE Recette;
    END;|

    -- Consulter les commandes d'un client

DELIMITER |
CREATE PROCEDURE `CommandeClient`(IN IdentifiantClient INT(4))
BEGIN

SELECT * FROM commande
WHERE commande.IDClient LIKE IdentifiantClient;

END |


    -- sauvegarde des recettes

 #   DELIMITER |
    CREATE PROCEDURE `BackUpRecette`()
    BEGIN

    DELETE FROM backup.corbeillepréparationpotion;
    DELETE FROM backup.corbeillepréparationonguent;

    INSERT INTO backup.corbeillepréparationpotion
    SELECT *
    FROM backup.préparationpotion;

    INSERT INTO backup.corbeillepréparationonguent
    SELECT * 
    FROM backup.préparationonguent;

    DELETE FROM backup.préparationpotion; 
    DELETE FROM backup.préparationonguent;

    INSERT INTO backup.préparationpotion
    SELECT * 
    FROM projectbdd.préparationpotion;

    INSERT INTO backup.préparationonguent
    SELECT * 
    FROM projectbdd.préparationonguent;


    END;|

    -- afficher le stock d'un ingrédient


    CREATE PROCEDURE StockIngrédient()
	BEGIN
    SELECT *
    FROM stockingrédient;
	END |
    -- trigger d'update du stock

    CREATE TRIGGER UpdateStockIngrédient
    AFTER UPDATE
    ON stockingrédient
    FOR EACH ROW
    BEGIN
    CALL StockIngrédient();
	END |
    -- Suppresion d'un ingrédient arrivé à expiration

   # DELIMITER |
    CREATE TRIGGER `ExpirationIngrédient` 
    BEFORE UPDATE ON `stockingrédient`
    FOR EACH ROW 
    BEGIN
    DELETE 
    FROM stockingrédient 
    WHERE DATEDIFF( NOW(), stockingrédient.`DateArrivée` ) >stockingrédient.FraîcheurMax; 
    END|

    -- corbeille stockingrédient

  #  DELIMITER |
    CREATE TRIGGER `CorbeilleStockIngrédient` 
    BEFORE DELETE ON `stockingrédient` 
    FOR EACH ROW 
    BEGIN 
        CALL CorbeilleStockIngrédient( OLD.Ingrédient, OLD.DateArrivée, OLD.QuantitéEnStock,OLD.FraîcheurMax); 
    END;|

    -- décrémente l stcok d'ingrédient à l'envoi d'une commande
  #  DELIMITER |
    CREATE TRIGGER UpdateStockCommande
    AFTER UPDATE ON commande
    FOR EACH ROW
    BEGIN
    UPDATE stockingrédient, commande

    SET QuantitéEnStock = QuantitéEnStock - commande.Quantité 
    WHERE stockingrédient.Ingrédient 
    LIKE commande.Ingrédient AND commande.StatutCommande LIKE 'Confirmée';


    UPDATE commande
    SET commande.StatutCommande = 'Archivée' 
    WHERE commande.StatutCommande LIKE 'Confirmée'; 
    END; |


# DELIMITER | 
CREATE PROCEDURE CréerBackUp()
BEGIN

DROP DATABASE IF EXISTS BackUp;
CREATE DATABASE IF NOT EXISTS BackUp;

DROP TABLE IF EXISTS `Backup`.préparationpotion;
DROP TABLE IF EXISTS `Backup`.préparationonguent;
DROP TABLE IF EXISTS `Backup`.corbeillepréparationpotion;
DROP TABLE IF EXISTS `Backup`.corbeillepréparationonguent;


CREATE TABLE IF NOT EXISTS `Backup`.préparationpotion
SELECT *
FROM `Nouvelle BDD`.préparationpotion;

CREATE TABLE IF NOT EXISTS `Backup`.préparationonguent
SELECT Potion AS Onguent ,Ingrédient, OrdreIngrédient, FraicheurMinIngrédient, FraicheurMaxIngrédient, QuantitéIngrédient
FROM préparationpotion;

CREATE TABLE IF NOT EXISTS `BackUp`.corbeillepréparationpotion
SELECT *
FROM `Backup`.préparationpotion;

CREATE TABLE IF NOT EXISTS `BackUp`.corbeillepréparationonguent
SELECT *
FROM `Backup`.préparationonguent;


END|
